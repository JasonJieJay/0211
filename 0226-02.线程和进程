学习目标
掌握进程和线程的基本概念和应用方法

课程内容
a.进程和线程
b.多线程

a.进程和线程
进程：正在运行的程序实例
线程：进程的一个实体，被系统地理调度分配的基本单位，线程自己不拥有资源，
他可以和同属一个进程的线程共享资源

进程和线程的区别
1.地址空间：进程内的一个指定单元，进程至少有一个线程，共享进程的地址空间
，进程是有自己独立空间
2.资源拥有：进程的资源分配独立，统一进程内线程共享进程资源
3.线程是处理器调度的基本单位，进程不是
4.二者都可以并发执行

b.多线程
加速程序及计算的有效方式
b1.添加线程
import threading
print(threading.active_count())         #获取当前线程数量
print(threading.current_thread())       #查看当前运行的线程

#添加线程
def thread_job():
        print('当前线程是%s'%threading.current_thread())

def thread_job2():
        print('当前线程是%s'%threading.current_thread())

thread=threading.Thread(target=thread_job)
thread1=threading.Thread(target=thread_job2)
thread.start()
thread1.start()

b2.join功能
如果不加join功能，程序输出可能会混乱名，执行完全取决于执行的速度
import time
import threading
def t1():
        print('T1开始了')
        for i in range(10):
                time.sleep(0.1)
        print('T1结束')

def t2():
        print('t2开始了')
        print('t2结束了')

th1=threading.Thread(target=t1)
th2=threading.Thread(target=t2)
th1.start()
th2.start()
th2.join()
th1.join()
print('finished')


b3.gil
python完全支持多线程编程，但是代码并行是不安全的，通常会有个全局解释器进行控制，确保任何时候只有一个线程在执行

b4.线程锁
lock在不同线程中共享同一个内存时候，相互之间不影响，使用lock方法实在每个线程执行运行修改之前，执行lock.acquire()将内存上锁
def job1():
 42         global A,lock
 43         lock.acquire()
 44         for i in range(10):
 45                 A+=1
 46                 print('job',A)
 47         lock.release()
 48 
 49 def job2():
 50         global A,lock
 51         lock.acquire()
 52         for i in range(10):
 53                 A+=10
 54                 print('job2',A)
 55         lock.release()
 56 
 57 lock=threading.Lock()
 58 A=0
 59 th1=threading.Thread(target=job1)
 60 th2=threading.Thread(target=job2)
 61 th1.start()
 62 th2.start()
 63 th2.join()
 64 th1.join()
















